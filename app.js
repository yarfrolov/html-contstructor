// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
let blocks = [];
let emailBlocks = [];
let currentEditingBlock = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    loadBlocksFromStorage();
    initializeEventListeners();
    renderAvailableBlocks();
    renderAdminBlocks();
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –±–ª–æ–∫–æ–≤ –∏–∑ localStorage
function loadBlocksFromStorage() {
    const savedBlocks = localStorage.getItem('emailBlocks');
    if (savedBlocks) {
        blocks = JSON.parse(savedBlocks);
    } else {
        // –ü—Ä–∏–º–µ—Ä—ã –±–ª–æ–∫–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        blocks = [
            {
                id: generateId(),
                name: '–ó–∞–≥–æ–ª–æ–≤–æ–∫',
                html: '<div style="text-align: center; padding: 40px 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white;"><h1 style="margin: 0; font-size: 32px; font-weight: bold;" data-editable="text">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h1></div>'
            },
            {
                id: generateId(),
                name: '–¢–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫',
                html: '<div style="padding: 30px 20px; background: #ffffff;"><p style="margin: 0; font-size: 16px; line-height: 1.6; color: #333;" data-editable="text">–≠—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫. –í—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –ø–æ —Å–≤–æ–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é.</p></div>'
            },
            {
                id: generateId(),
                name: '–ö–Ω–æ–ø–∫–∞',
                html: '<div style="text-align: center; padding: 30px 20px; background: #f8f9fa;"><a href="https://example.com" style="display: inline-block; padding: 15px 40px; background: #667eea; color: white; text-decoration: none; border-radius: 8px; font-weight: bold; font-size: 16px;" data-editable="text" data-editable-href="href">–ù–∞–∂–º–∏ –º–µ–Ω—è</a></div>'
            },
            {
                id: generateId(),
                name: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
                html: '<div style="padding: 20px; text-align: center; background: #ffffff;"><img src="https://via.placeholder.com/600x300" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" style="max-width: 100%; height: auto; border-radius: 8px;" data-editable-src="src" /></div>'
            },
            {
                id: generateId(),
                name: '–î–≤–µ –∫–æ–ª–æ–Ω–∫–∏',
                html: '<div style="padding: 30px 20px; background: #ffffff;"><table width="100%" cellpadding="0" cellspacing="0"><tr><td width="48%" style="padding: 15px; background: #f8f9fa; border-radius: 8px; vertical-align: top;"><h3 style="margin: 0 0 10px 0; color: #333; font-size: 20px;" data-editable="text">–õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞</h3><p style="margin: 0; color: #666; font-size: 14px; line-height: 1.6;" data-editable="text">–¢–µ–∫—Å—Ç –ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏</p></td><td width="4%"></td><td width="48%" style="padding: 15px; background: #f8f9fa; border-radius: 8px; vertical-align: top;"><h3 style="margin: 0 0 10px 0; color: #333; font-size: 20px;" data-editable="text">–ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞</h3><p style="margin: 0; color: #666; font-size: 14px; line-height: 1.6;" data-editable="text">–¢–µ–∫—Å—Ç –ø—Ä–∞–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏</p></td></tr></table></div>'
            },
            {
                id: generateId(),
                name: '–§—É—Ç–µ—Ä',
                html: '<div style="text-align: center; padding: 30px 20px; background: #2c3e50; color: white;"><p style="margin: 0 0 10px 0; font-size: 14px;" data-editable="text">¬© 2025 –í–∞—à–∞ –ö–æ–º–ø–∞–Ω–∏—è. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p><p style="margin: 0; font-size: 12px; color: #95a5a6;" data-editable="text">Email: info@example.com | –¢–µ–ª–µ—Ñ–æ–Ω: +7 (123) 456-78-90</p></div>'
            }
        ];
        saveBlocksToStorage();
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ –≤ localStorage
function saveBlocksToStorage() {
    localStorage.setItem('emailBlocks', JSON.stringify(blocks));
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
function generateId() {
    return 'block_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function initializeEventListeners() {
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤
    document.getElementById('adminMode').addEventListener('click', function() {
        document.getElementById('adminPanel').classList.remove('hidden');
        document.getElementById('userPanel').classList.add('hidden');
        this.classList.add('active');
        document.getElementById('userMode').classList.remove('active');
    });

    document.getElementById('userMode').addEventListener('click', function() {
        document.getElementById('adminPanel').classList.add('hidden');
        document.getElementById('userPanel').classList.remove('hidden');
        this.classList.add('active');
        document.getElementById('adminMode').classList.remove('active');
    });

    // –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    document.getElementById('addBlock').addEventListener('click', addNewBlock);

    // –ü–∞–Ω–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    document.getElementById('clearEmail').addEventListener('click', clearEmail);
    document.getElementById('previewEmail').addEventListener('click', showPreview);
    document.getElementById('exportEmail').addEventListener('click', showExport);

    // –†–µ–¥–∞–∫—Ç–æ—Ä
    document.getElementById('closeEditor').addEventListener('click', function() {
        document.querySelector('.editor-panel').classList.add('hidden');
    });

    // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    document.getElementById('closePreview').addEventListener('click', function() {
        document.getElementById('previewModal').classList.add('hidden');
    });

    document.getElementById('closeExport').addEventListener('click', function() {
        document.getElementById('exportModal').classList.add('hidden');
    });

    document.getElementById('copyHTML').addEventListener('click', copyToClipboard);
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
function addNewBlock() {
    const name = document.getElementById('blockName').value.trim();
    const html = document.getElementById('blockHTML').value.trim();

    if (!name || !html) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ HTML –∫–æ–¥ –±–ª–æ–∫–∞');
        return;
    }

    const newBlock = {
        id: generateId(),
        name: name,
        html: html
    };

    blocks.push(newBlock);
    saveBlocksToStorage();
    renderAdminBlocks();
    renderAvailableBlocks();

    // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π
    document.getElementById('blockName').value = '';
    document.getElementById('blockHTML').value = '';

    alert('–ë–ª–æ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
}

// –£–¥–∞–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
function deleteBlock(blockId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –±–ª–æ–∫?')) {
        return;
    }

    blocks = blocks.filter(block => block.id !== blockId);
    saveBlocksToStorage();
    renderAdminBlocks();
    renderAvailableBlocks();
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
function renderAdminBlocks() {
    const container = document.getElementById('adminBlocksList');
    container.innerHTML = '';

    if (blocks.length === 0) {
        container.innerHTML = '<p style="color: #999; text-align: center; padding: 20px;">–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤</p>';
        return;
    }

    blocks.forEach(block => {
        const blockElement = document.createElement('div');
        blockElement.className = 'admin-block-item';
        blockElement.innerHTML = `
            <h4>${escapeHtml(block.name)}</h4>
            <pre>${escapeHtml(block.html)}</pre>
            <button onclick="deleteBlock('${block.id}')">–£–¥–∞–ª–∏—Ç—å</button>
        `;
        container.appendChild(blockElement);
    });
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function renderAvailableBlocks() {
    const container = document.getElementById('availableBlocks');
    container.innerHTML = '';

    if (blocks.length === 0) {
        container.innerHTML = '<p style="color: #999; text-align: center; padding: 20px;">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–ª–æ–∫–æ–≤</p>';
        return;
    }

    blocks.forEach(block => {
        const blockElement = document.createElement('div');
        blockElement.className = 'block-item';
        blockElement.innerHTML = `<h4>${escapeHtml(block.name)}</h4>`;
        blockElement.addEventListener('click', () => addBlockToEmail(block));
        container.appendChild(blockElement);
    });
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞ –≤ email
function addBlockToEmail(block) {
    const emailBlock = {
        id: generateId(),
        sourceId: block.id,
        name: block.name,
        html: block.html
    };

    emailBlocks.push(emailBlock);
    renderEmailCanvas();
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ email canvas
function renderEmailCanvas() {
    const canvas = document.getElementById('emailCanvas');
    canvas.innerHTML = '';

    if (emailBlocks.length === 0) {
        canvas.innerHTML = '<div class="empty-state"><p>üëà –í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫–∏ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Å–ª–µ–≤–∞</p></div>';
        return;
    }

    emailBlocks.forEach((block, index) => {
        const blockElement = document.createElement('div');
        blockElement.className = 'canvas-block';
        blockElement.innerHTML = `
            <div class="canvas-block-content">${block.html}</div>
            <div class="canvas-block-controls">
                <button class="edit-btn" onclick="editBlock('${block.id}')">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                ${index > 0 ? `<button class="move-up-btn" onclick="moveBlock('${block.id}', 'up')">‚Üë</button>` : ''}
                ${index < emailBlocks.length - 1 ? `<button class="move-down-btn" onclick="moveBlock('${block.id}', 'down')">‚Üì</button>` : ''}
                <button class="delete-btn" onclick="deleteEmailBlock('${block.id}')">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
            </div>
        `;
        canvas.appendChild(blockElement);
    });
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞
function editBlock(blockId) {
    const block = emailBlocks.find(b => b.id === blockId);
    if (!block) return;

    currentEditingBlock = blockId;
    
    const editorPanel = document.querySelector('.editor-panel');
    const editorContent = document.getElementById('editorContent');
    
    // –ü–∞—Ä—Å–∏–º HTML –∏ –Ω–∞—Ö–æ–¥–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = block.html;
    
    const editableElements = tempDiv.querySelectorAll('[data-editable], [data-editable-href], [data-editable-src]');
    
    editorContent.innerHTML = '<p style="color: #666; margin-bottom: 20px;">–†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–ª–æ–∫–∞:</p>';
    
    if (editableElements.length === 0) {
        editorContent.innerHTML += '<p style="color: #999;">–≠—Ç–æ—Ç –±–ª–æ–∫ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤</p>';
    } else {
        editableElements.forEach((element, index) => {
            const field = document.createElement('div');
            field.className = 'editable-field';
            
            if (element.hasAttribute('data-editable')) {
                const label = document.createElement('label');
                label.textContent = `–¢–µ–∫—Å—Ç ${index + 1}:`;
                field.appendChild(label);
                
                if (element.tagName === 'P' || element.tagName === 'DIV') {
                    const textarea = document.createElement('textarea');
                    textarea.value = element.textContent;
                    textarea.dataset.index = index;
                    textarea.dataset.type = 'text';
                    field.appendChild(textarea);
                } else {
                    const input = document.createElement('input');
                    input.type = 'text';
                    input.value = element.textContent;
                    input.dataset.index = index;
                    input.dataset.type = 'text';
                    field.appendChild(input);
                }
            }
            
            if (element.hasAttribute('data-editable-href')) {
                const label = document.createElement('label');
                label.textContent = `–°—Å—ã–ª–∫–∞ ${index + 1}:`;
                field.appendChild(label);
                
                const input = document.createElement('input');
                input.type = 'url';
                input.value = element.getAttribute('href') || '';
                input.dataset.index = index;
                input.dataset.type = 'href';
                field.appendChild(input);
            }
            
            if (element.hasAttribute('data-editable-src')) {
                const label = document.createElement('label');
                label.textContent = `URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${index + 1}:`;
                field.appendChild(label);
                
                const input = document.createElement('input');
                input.type = 'url';
                input.value = element.getAttribute('src') || '';
                input.dataset.index = index;
                input.dataset.type = 'src';
                field.appendChild(input);
            }
            
            editorContent.appendChild(field);
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const saveBtn = document.createElement('button');
        saveBtn.className = 'btn-primary';
        saveBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';
        saveBtn.style.marginTop = '20px';
        saveBtn.addEventListener('click', saveBlockEdits);
        editorContent.appendChild(saveBtn);
    }
    
    editorPanel.classList.remove('hidden');
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–ª–æ–∫–∞
function saveBlockEdits() {
    const block = emailBlocks.find(b => b.id === currentEditingBlock);
    if (!block) return;
    
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = block.html;
    
    const editableElements = tempDiv.querySelectorAll('[data-editable], [data-editable-href], [data-editable-src]');
    const inputs = document.querySelectorAll('#editorContent input, #editorContent textarea');
    
    inputs.forEach(input => {
        const index = parseInt(input.dataset.index);
        const type = input.dataset.type;
        const element = editableElements[index];
        
        if (type === 'text') {
            element.textContent = input.value;
        } else if (type === 'href') {
            element.setAttribute('href', input.value);
        } else if (type === 'src') {
            element.setAttribute('src', input.value);
        }
    });
    
    block.html = tempDiv.innerHTML;
    renderEmailCanvas();
    
    document.querySelector('.editor-panel').classList.add('hidden');
    alert('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
}

// –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –±–ª–æ–∫–∞
function moveBlock(blockId, direction) {
    const index = emailBlocks.findIndex(b => b.id === blockId);
    if (index === -1) return;
    
    if (direction === 'up' && index > 0) {
        [emailBlocks[index], emailBlocks[index - 1]] = [emailBlocks[index - 1], emailBlocks[index]];
    } else if (direction === 'down' && index < emailBlocks.length - 1) {
        [emailBlocks[index], emailBlocks[index + 1]] = [emailBlocks[index + 1], emailBlocks[index]];
    }
    
    renderEmailCanvas();
}

// –£–¥–∞–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞ –∏–∑ email
function deleteEmailBlock(blockId) {
    emailBlocks = emailBlocks.filter(b => b.id !== blockId);
    renderEmailCanvas();
}

// –û—á–∏—Å—Ç–∫–∞ email
function clearEmail() {
    if (emailBlocks.length === 0) return;
    
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –ø–∏—Å—å–º–æ?')) {
        emailBlocks = [];
        document.getElementById('emailSubject').value = '';
        renderEmailCanvas();
    }
}

// –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä email
function showPreview() {
    if (emailBlocks.length === 0) {
        alert('–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –±–ª–æ–∫–∏ –≤ –ø–∏—Å—å–º–æ');
        return;
    }
    
    const subject = document.getElementById('emailSubject').value || '–ë–µ–∑ —Ç–µ–º—ã';
    const html = generateFullEmailHTML();
    
    document.querySelector('.preview-subject').textContent = `–¢–µ–º–∞: ${subject}`;
    
    const iframe = document.getElementById('previewFrame');
    const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;
    iframeDoc.open();
    iframeDoc.write(html);
    iframeDoc.close();
    
    document.getElementById('previewModal').classList.remove('hidden');
}

// –≠–∫—Å–ø–æ—Ä—Ç HTML
function showExport() {
    if (emailBlocks.length === 0) {
        alert('–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –±–ª–æ–∫–∏ –≤ –ø–∏—Å—å–º–æ');
        return;
    }
    
    const html = generateFullEmailHTML();
    document.getElementById('exportHTML').value = html;
    document.getElementById('exportModal').classList.remove('hidden');
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ HTML –ø–∏—Å—å–º–∞
function generateFullEmailHTML() {
    const subject = document.getElementById('emailSubject').value || '–ë–µ–∑ —Ç–µ–º—ã';
    const blocksHTML = emailBlocks.map(block => block.html).join('\n');
    
    return `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${escapeHtml(subject)}</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
        }
        .email-container {
            max-width: 600px;
            margin: 0 auto;
            background-color: #ffffff;
        }
    </style>
</head>
<body>
    <div class="email-container">
        ${blocksHTML}
    </div>
</body>
</html>`;
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ HTML –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
function copyToClipboard() {
    const textarea = document.getElementById('exportHTML');
    textarea.select();
    document.execCommand('copy');
    alert('HTML —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
}

// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

